@startuml Architektur_Fein
skinparam Style strictuml
skinparam genericDisplay old
skinparam classAttributeIconSize 0
skinparam monochrome true

component ContactSplitter{

    component View {
        class BaseWindow<VM extends BaseViewModel>
        class MainWindow
        class TitleWindow
        class SalutationWindow
    }

    component ViewModel {
        class BaseViewModel
        class MainWindowViewModel
        class TitleWindowViewModel
        class SalutationWindowViewModel
    }

    component Controller {
        class BaseWindowController<V extends BaseWindow, VM extends BaseViewModel>
        class MainWindowController
        class TitleWindowController
        class SalutationWindowController
    }

    component Model{
        class Contact{
            +salutation: string
            +lastName: string
            +firstName: string
            +gender: Gender
            +titles: IList<string>
        }

        class ParseResult<M>{
            +model: M
            +success: boolean
            +errorMessages: IEnumerable<string>
        }

        enum Gender<<enum>>{
            Female
            Male
            Neutral
        }
    }

    component Service {
        class TitleService{
            +SaveOrUpdateTitle(title: string, titleSalutation: string): boolean
            +DeleteTitle(title: string): boolean
            +GetTitles(): IEnumerable<string>
            +GetTitleSalutation(title: string): string
        }

        class SalutationService{
            +SaveOrUpdateSalutation(salutation: string, gender: Gender): boolean
            +DeleteSalutation(salutation: string): boolean
            +GetSalutations(): IEnumerable<string>
            +GetGender(salutation: string): Gender
        }

        class ParserService{
            -titleService: TitleService
            -salutationService: SalutationService
            +ParseContact(contactInput: string): ParseResult<Contact>
        }
        
        class LetterSalutationService{
            -titleService: TitleService
            +GenerateLetterSalutation(contact: Contact): string
        }
    }
}

'services
'letterSalutation service
LetterSalutationService --> TitleService
LetterSalutationService --> Contact
'parser serive
TitleService <-- ParserService
SalutationService <-- ParserService
Contact <-- ParserService
ParseResult <-- ParserService:<<bind>>M::Contact
'salutation service
SalutationService --> Gender

'model
Contact --> Gender

'view
BaseWindow <|-- MainWindow:<<bind>>VM::MainWindowViewModel
BaseWindow <|-- TitleWindow:<<bind>>VM::TitleWindowViewModel
BaseWindow <|-- SalutationWindow:<<bind>>VM::SalutationWindowViewModel

'viewModel
BaseViewModel <|-- MainWindowViewModel
BaseViewModel <|-- TitleWindowViewModel
BaseViewModel <|-- SalutationWindowViewModel

'controller
BaseWindowController <|-- MainWindowController:<<bind>>V::MainWindow,VM::MainWindowViewModel
BaseWindowController <|-- TitleWindowController:<<bind>>V::TitleWindow,VM::TitleWindowViewModel
BaseWindowController <|-- SalutationWindowController:<<bind>>V::SalutationWindow,VM::SalutationWindowViewModel

'view - viewModel - controller - service
Service <-- Controller
Controller --> View
Controller --> ViewModel
ViewModel --> Model

hide empty fields
hide empty methods

@enduml